/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../common'

export interface AllowAllACLInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'canCreatePoll'
      | 'canManagePoll'
      | 'canVoteOnPoll'
      | 'onPollClosed'
      | 'onPollCreated'
      | 'supportsInterface'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'canCreatePoll', values: [AddressLike, AddressLike]): string
  encodeFunctionData(functionFragment: 'canManagePoll', values: [AddressLike, BytesLike, AddressLike]): string
  encodeFunctionData(
    functionFragment: 'canVoteOnPoll',
    values: [AddressLike, BytesLike, AddressLike, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'onPollClosed', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'onPollCreated', values: [BytesLike, AddressLike, BytesLike]): string
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string

  decodeFunctionResult(functionFragment: 'canCreatePoll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canManagePoll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'canVoteOnPoll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onPollClosed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'onPollCreated', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
}

export interface AllowAllACL extends BaseContract {
  connect(runner?: ContractRunner | null): AllowAllACL
  waitForDeployment(): Promise<this>

  interface: AllowAllACLInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>

  canCreatePoll: TypedContractMethod<[arg0: AddressLike, arg1: AddressLike], [boolean], 'view'>

  canManagePoll: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike, arg2: AddressLike],
    [boolean],
    'view'
  >

  canVoteOnPoll: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike, arg2: AddressLike, arg3: BytesLike],
    [bigint],
    'view'
  >

  onPollClosed: TypedContractMethod<[arg0: BytesLike], [void], 'nonpayable'>

  onPollCreated: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike, arg2: BytesLike],
    [void],
    'nonpayable'
  >

  supportsInterface: TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T

  getFunction(
    nameOrSignature: 'canCreatePoll'
  ): TypedContractMethod<[arg0: AddressLike, arg1: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'canManagePoll'
  ): TypedContractMethod<[arg0: AddressLike, arg1: BytesLike, arg2: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'canVoteOnPoll'
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike, arg2: AddressLike, arg3: BytesLike],
    [bigint],
    'view'
  >
  getFunction(nameOrSignature: 'onPollClosed'): TypedContractMethod<[arg0: BytesLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'onPollCreated'
  ): TypedContractMethod<[arg0: BytesLike, arg1: AddressLike, arg2: BytesLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'supportsInterface'
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>

  filters: {}
}
