/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from 'ethers'
import type { Signer, ContractDeployTransaction, ContractRunner } from 'ethers'
import type { NonPayableOverrides } from '../../common'
import type { AllowAllACL, AllowAllACLInterface } from '../../contracts/AllowAllACL'

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'canCreatePoll',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'canManagePoll',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    name: 'canVoteOnPoll',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    name: 'onPollClosed',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    name: 'onPollCreated',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
] as const

const _bytecode =
  '0x6080806040523461001657610268908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146101615750806356d15dc81461013e5780638d74950e14610129578063a4b4bbda146100d8578063c60e2047146100945763ff6fef7d1461006357600080fd5b346100915760403660031901126100915761007c6101bd565b506100856101ee565b50602060405160018152f35b80fd5b5034610091576060366003190112610091576100ae6101ee565b5060443567ffffffffffffffff81116100d4576100cf903690600401610204565b505080f35b5080fd5b5034610091576080366003190112610091576100f26101bd565b506100fb6101d8565b5060643567ffffffffffffffff81116100d45761011c903690600401610204565b5050602060405160018152f35b50346100915760203660031901126100915780f35b5034610091576060366003190112610091576101586101bd565b506100856101d8565b9050346100d45760203660031901126100d45760043563ffffffff60e01b81168091036101b9576020925063b91f535b60e01b81149081156101a5575b5015158152f35b60016290108360e01b03191490503861019e565b8280fd5b600435906001600160a01b03821682036101d357565b600080fd5b604435906001600160a01b03821682036101d357565b602435906001600160a01b03821682036101d357565b9181601f840112156101d35782359167ffffffffffffffff83116101d357602083818601950101116101d35756fea26469706673582212206cb2fcbc048ef36bd404bf20fa594c0a2c600e015db77afa9900d738d38f9d6864736f6c63430008170033'

type AllowAllACLConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: AllowAllACLConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1

export class AllowAllACL__factory extends ContractFactory {
  constructor(...args: AllowAllACLConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {})
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AllowAllACL & {
        deploymentTransaction(): ContractTransactionResponse
      }
    >
  }
  override connect(runner: ContractRunner | null): AllowAllACL__factory {
    return super.connect(runner) as AllowAllACL__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): AllowAllACLInterface {
    return new Interface(_abi) as AllowAllACLInterface
  }
  static connect(address: string, runner?: ContractRunner | null): AllowAllACL {
    return new Contract(address, _abi, runner) as unknown as AllowAllACL
  }
}
