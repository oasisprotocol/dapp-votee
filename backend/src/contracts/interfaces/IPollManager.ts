/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../common'

export interface IPollManagerInterface extends Interface {
  getFunction(nameOrSignature: 'canVoteOnPoll' | 'getACL' | 'getPollACL'): FunctionFragment

  encodeFunctionData(functionFragment: 'canVoteOnPoll', values: [BytesLike, AddressLike, BytesLike]): string
  encodeFunctionData(functionFragment: 'getACL', values?: undefined): string
  encodeFunctionData(functionFragment: 'getPollACL', values: [BytesLike]): string

  decodeFunctionResult(functionFragment: 'canVoteOnPoll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getACL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPollACL', data: BytesLike): Result
}

export interface IPollManager extends BaseContract {
  connect(runner?: ContractRunner | null): IPollManager
  waitForDeployment(): Promise<this>

  interface: IPollManagerInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>

  canVoteOnPoll: TypedContractMethod<
    [in_proposalId: BytesLike, in_voter: AddressLike, in_data: BytesLike],
    [bigint],
    'view'
  >

  getACL: TypedContractMethod<[], [string], 'view'>

  getPollACL: TypedContractMethod<[proposalId: BytesLike], [string], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T

  getFunction(
    nameOrSignature: 'canVoteOnPoll'
  ): TypedContractMethod<
    [in_proposalId: BytesLike, in_voter: AddressLike, in_data: BytesLike],
    [bigint],
    'view'
  >
  getFunction(nameOrSignature: 'getACL'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'getPollACL'): TypedContractMethod<[proposalId: BytesLike], [string], 'view'>

  filters: {}
}
